import{_ as a,c as s,o as i,aj as e}from"./chunks/framework.CM7BdzdB.js";const u=JSON.parse('{"title":"版本管理策略","description":"","frontmatter":{},"headers":[],"relativePath":"guide/versioning.md","filePath":"guide/versioning.md"}'),l={name:"guide/versioning.md"},t=e(`<h1 id="版本管理策略" tabindex="-1">版本管理策略 <a class="header-anchor" href="#版本管理策略" aria-label="Permalink to &quot;版本管理策略&quot;">​</a></h1><p>本项目使用 <a href="https://github.com/changesets/changesets" target="_blank" rel="noreferrer">Changesets</a> 进行版本管理和发布。这个文档描述了我们的版本管理策略和工作流程。</p><h2 id="语义化版本" tabindex="-1">语义化版本 <a class="header-anchor" href="#语义化版本" aria-label="Permalink to &quot;语义化版本&quot;">​</a></h2><p>我们遵循 <a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noreferrer">语义化版本 2.0.0</a> 规范，版本号格式为：<code>主版本号.次版本号.修订号</code>。</p><ul><li><strong>主版本号</strong>：当你做了不兼容的 API 修改</li><li><strong>次版本号</strong>：当你做了向下兼容的功能性新增</li><li><strong>修订号</strong>：当你做了向下兼容的问题修正</li></ul><h2 id="版本增量规则" tabindex="-1">版本增量规则 <a class="header-anchor" href="#版本增量规则" aria-label="Permalink to &quot;版本增量规则&quot;">​</a></h2><p>在创建 changeset 时，需要根据变更的性质选择版本增量类型：</p><ul><li><strong>major</strong>：不兼容的 API 变更，如： <ul><li>删除或重命名公共 API</li><li>更改公共 API 的行为方式</li><li>更改公共 API 的参数或返回类型</li></ul></li><li><strong>minor</strong>：向下兼容的功能性新增，如： <ul><li>添加新功能或新的公共 API</li><li>添加新的可选参数</li><li>添加新的配置选项</li></ul></li><li><strong>patch</strong>：向下兼容的问题修正，如： <ul><li>修复 bug</li><li>性能优化</li><li>文档更新</li><li>依赖更新（不影响 API）</li></ul></li></ul><h2 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h2><h3 id="_1-创建变更集" tabindex="-1">1. 创建变更集 <a class="header-anchor" href="#_1-创建变更集" aria-label="Permalink to &quot;1. 创建变更集&quot;">​</a></h3><p>当你完成一个功能或修复一个 bug 时，需要创建一个变更集：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span></span></code></pre></div><p>这个命令会引导你：</p><ol><li>选择受影响的包</li><li>选择版本增量类型（major、minor 或 patch）</li><li>提供变更描述</li></ol><h3 id="_2-提交变更" tabindex="-1">2. 提交变更 <a class="header-anchor" href="#_2-提交变更" aria-label="Permalink to &quot;2. 提交变更&quot;">​</a></h3><p>创建变更集后，将生成的 <code>.changeset</code> 目录下的文件一起提交：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .changeset</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;chore: add changeset for [简短描述]&quot;</span></span></code></pre></div><h3 id="_3-版本更新" tabindex="-1">3. 版本更新 <a class="header-anchor" href="#_3-版本更新" aria-label="Permalink to &quot;3. 版本更新&quot;">​</a></h3><p>当变更集被合并到主分支后，CI 会自动运行版本更新：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ci:version</span></span></code></pre></div><p>这个命令会：</p><ol><li>读取所有变更集</li><li>更新受影响包的版本</li><li>更新依赖关系</li><li>生成或更新 CHANGELOG.md</li></ol><h3 id="_4-发布" tabindex="-1">4. 发布 <a class="header-anchor" href="#_4-发布" aria-label="Permalink to &quot;4. 发布&quot;">​</a></h3><p>版本更新后，CI 会自动发布包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ci:publish</span></span></code></pre></div><h2 id="依赖关系处理" tabindex="-1">依赖关系处理 <a class="header-anchor" href="#依赖关系处理" aria-label="Permalink to &quot;依赖关系处理&quot;">​</a></h2><p>在 monorepo 中，包之间可能存在依赖关系。Changesets 会自动处理这些依赖关系：</p><ul><li>当一个包发生变更时，所有依赖它的包也会更新</li><li>内部依赖的版本更新策略在 <code>.changeset/config.json</code> 中配置</li></ul><h2 id="预发布" tabindex="-1">预发布 <a class="header-anchor" href="#预发布" aria-label="Permalink to &quot;预发布&quot;">​</a></h2><p>对于重大变更，我们使用预发布版本进行测试：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pre</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> next</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ci:version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ci:publish</span></span></code></pre></div><p>这会发布带有 <code>next</code> 标签的预发布版本。</p><h2 id="手动发布" tabindex="-1">手动发布 <a class="header-anchor" href="#手动发布" aria-label="Permalink to &quot;手动发布&quot;">​</a></h2><p>在特殊情况下，可能需要手动发布：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入需要发布的包目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/my-package</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发布</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span></span></code></pre></div><h2 id="版本历史" tabindex="-1">版本历史 <a class="header-anchor" href="#版本历史" aria-label="Permalink to &quot;版本历史&quot;">​</a></h2><p>每个包的版本历史记录在其 <code>CHANGELOG.md</code> 文件中，包含每个版本的变更内容和贡献者信息。</p>`,37),n=[t];function h(p,o,r,d,c,k){return i(),s("div",null,n)}const b=a(l,[["render",h]]);export{u as __pageData,b as default};
