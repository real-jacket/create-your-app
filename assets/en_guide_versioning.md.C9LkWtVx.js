import{_ as e,c as a,o as i,aj as s}from"./chunks/framework.CM7BdzdB.js";const k=JSON.parse('{"title":"Versioning Strategy","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/versioning.md","filePath":"en/guide/versioning.md"}'),n={name:"en/guide/versioning.md"},t=s(`<h1 id="versioning-strategy" tabindex="-1">Versioning Strategy <a class="header-anchor" href="#versioning-strategy" aria-label="Permalink to &quot;Versioning Strategy&quot;">​</a></h1><p>This project uses <a href="https://github.com/changesets/changesets" target="_blank" rel="noreferrer">Changesets</a> for version management and publishing. This document describes our versioning strategy and workflow.</p><h2 id="semantic-versioning" tabindex="-1">Semantic Versioning <a class="header-anchor" href="#semantic-versioning" aria-label="Permalink to &quot;Semantic Versioning&quot;">​</a></h2><p>We follow the <a href="https://semver.org/" target="_blank" rel="noreferrer">Semantic Versioning 2.0.0</a> specification, with version numbers in the format: <code>MAJOR.MINOR.PATCH</code>.</p><ul><li><strong>MAJOR</strong>: when you make incompatible API changes</li><li><strong>MINOR</strong>: when you add functionality in a backward compatible manner</li><li><strong>PATCH</strong>: when you make backward compatible bug fixes</li></ul><h2 id="version-increment-rules" tabindex="-1">Version Increment Rules <a class="header-anchor" href="#version-increment-rules" aria-label="Permalink to &quot;Version Increment Rules&quot;">​</a></h2><p>When creating a changeset, you need to select the version increment type based on the nature of the change:</p><ul><li><strong>major</strong>: incompatible API changes, such as: <ul><li>Deleting or renaming public APIs</li><li>Changing the behavior of public APIs</li><li>Changing the parameters or return types of public APIs</li></ul></li><li><strong>minor</strong>: backward compatible new features, such as: <ul><li>Adding new features or public APIs</li><li>Adding new optional parameters</li><li>Adding new configuration options</li></ul></li><li><strong>patch</strong>: backward compatible bug fixes, such as: <ul><li>Bug fixes</li><li>Performance optimizations</li><li>Documentation updates</li><li>Dependency updates (that don&#39;t affect the API)</li></ul></li></ul><h2 id="workflow" tabindex="-1">Workflow <a class="header-anchor" href="#workflow" aria-label="Permalink to &quot;Workflow&quot;">​</a></h2><h3 id="_1-creating-a-changeset" tabindex="-1">1. Creating a Changeset <a class="header-anchor" href="#_1-creating-a-changeset" aria-label="Permalink to &quot;1. Creating a Changeset&quot;">​</a></h3><p>When you complete a feature or fix a bug, you need to create a changeset:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span></span></code></pre></div><p>This command will guide you through:</p><ol><li>Selecting the affected packages</li><li>Choosing the version increment type (major, minor, or patch)</li><li>Providing a change description</li></ol><h3 id="_2-committing-changes" tabindex="-1">2. Committing Changes <a class="header-anchor" href="#_2-committing-changes" aria-label="Permalink to &quot;2. Committing Changes&quot;">​</a></h3><p>After creating a changeset, commit the generated files in the <code>.changeset</code> directory:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .changeset</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;chore: add changeset for [brief description]&quot;</span></span></code></pre></div><h3 id="_3-version-update" tabindex="-1">3. Version Update <a class="header-anchor" href="#_3-version-update" aria-label="Permalink to &quot;3. Version Update&quot;">​</a></h3><p>When changesets are merged into the main branch, CI will automatically run the version update:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ci:version</span></span></code></pre></div><p>This command will:</p><ol><li>Read all changesets</li><li>Update the versions of affected packages</li><li>Update dependencies</li><li>Generate or update CHANGELOG.md</li></ol><h3 id="_4-publishing" tabindex="-1">4. Publishing <a class="header-anchor" href="#_4-publishing" aria-label="Permalink to &quot;4. Publishing&quot;">​</a></h3><p>After the version update, CI will automatically publish the packages:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ci:publish</span></span></code></pre></div><h2 id="dependency-handling" tabindex="-1">Dependency Handling <a class="header-anchor" href="#dependency-handling" aria-label="Permalink to &quot;Dependency Handling&quot;">​</a></h2><p>In a monorepo, packages may have dependencies on each other. Changesets automatically handles these dependencies:</p><ul><li>When a package changes, all packages that depend on it will also be updated</li><li>The version update strategy for internal dependencies is configured in <code>.changeset/config.json</code></li></ul><h2 id="prereleases" tabindex="-1">Prereleases <a class="header-anchor" href="#prereleases" aria-label="Permalink to &quot;Prereleases&quot;">​</a></h2><p>For major changes, we use prerelease versions for testing:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pre</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> next</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ci:version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ci:publish</span></span></code></pre></div><p>This will publish prerelease versions with the <code>next</code> tag.</p><h2 id="manual-publishing" tabindex="-1">Manual Publishing <a class="header-anchor" href="#manual-publishing" aria-label="Permalink to &quot;Manual Publishing&quot;">​</a></h2><p>In special cases, you may need to publish manually:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Navigate to the package directory</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/my-package</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Publish</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span></span></code></pre></div><h2 id="version-history" tabindex="-1">Version History <a class="header-anchor" href="#version-history" aria-label="Permalink to &quot;Version History&quot;">​</a></h2><p>The version history of each package is recorded in its <code>CHANGELOG.md</code> file, containing the changes and contributor information for each version.</p>`,37),l=[t];function h(r,o,p,c,d,g){return i(),a("div",null,l)}const m=e(n,[["render",h]]);export{k as __pageData,m as default};
