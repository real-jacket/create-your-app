import{_ as t,c as a,o as s,aj as i}from"./chunks/framework.CM7BdzdB.js";const y=JSON.parse('{"title":"配置","description":"","frontmatter":{},"headers":[],"relativePath":"guide/configuration.md","filePath":"guide/configuration.md"}'),e={name:"guide/configuration.md"},h=i('<h1 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h1><h2 id="命令行选项" tabindex="-1">命令行选项 <a class="header-anchor" href="#命令行选项" aria-label="Permalink to &quot;命令行选项&quot;">​</a></h2><h3 id="create-命令" tabindex="-1">create 命令 <a class="header-anchor" href="#create-命令" aria-label="Permalink to &quot;create 命令&quot;">​</a></h3><p>创建新项目的命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options]</span></span></code></pre></div><p>选项：</p><table tabindex="0"><thead><tr><th>选项</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>-f, --force</code></td><td>如果目标目录已存在，强制覆盖</td><td><code>false</code></td></tr><tr><td><code>-t, --template &lt;path-to-template&gt;</code></td><td>指定模板路径或名称</td><td><code>@rjkt/cya-react-webpack-template</code></td></tr></tbody></table><h3 id="component-命令" tabindex="-1">component 命令 <a class="header-anchor" href="#component-命令" aria-label="Permalink to &quot;component 命令&quot;">​</a></h3><p>创建组件的命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [component-name] [options]</span></span></code></pre></div><p>选项：</p><table tabindex="0"><thead><tr><th>选项</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>-t, --template &lt;component-type-template&gt;</code></td><td>组件类型或模板目录</td><td><code>react</code></td></tr><tr><td><code>-d, --dir &lt;dir-of-component&gt;</code></td><td>组件创建的目录</td><td>当前目录</td></tr></tbody></table><h3 id="package-命令" tabindex="-1">package 命令 <a class="header-anchor" href="#package-命令" aria-label="Permalink to &quot;package 命令&quot;">​</a></h3><p>在 monorepo 项目中创建子包的命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pkg-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options]</span></span></code></pre></div><p>选项：</p><table tabindex="0"><thead><tr><th>选项</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>-f, --force</code></td><td>如果目标目录已存在，强制覆盖</td><td><code>false</code></td></tr><tr><td><code>-d, --dir &lt;dir-path&gt;</code></td><td>创建包的目录</td><td><code>packages</code></td></tr><tr><td><code>-t, --template &lt;template-path&gt;</code></td><td>模板目录路径</td><td><code>packages/template</code></td></tr><tr><td><code>-s, --scope &lt;scope&gt;</code></td><td>包的作用域</td><td><code>@rjkt</code></td></tr></tbody></table><h3 id="transform-命令" tabindex="-1">transform 命令 <a class="header-anchor" href="#transform-命令" aria-label="Permalink to &quot;transform 命令&quot;">​</a></h3><p>将源项目转换为模板的命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> transform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">source-template-pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">target-template-pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options]</span></span></code></pre></div><p>选项：</p><table tabindex="0"><thead><tr><th>选项</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>-n, --name &lt;package-name&gt;</code></td><td>模板包名</td><td>源目录名</td></tr></tbody></table><h2 id="模板配置" tabindex="-1">模板配置 <a class="header-anchor" href="#模板配置" aria-label="Permalink to &quot;模板配置&quot;">​</a></h2><h3 id="内置模板" tabindex="-1">内置模板 <a class="header-anchor" href="#内置模板" aria-label="Permalink to &quot;内置模板&quot;">​</a></h3><p>Create Your App 内置了以下模板：</p><ul><li><code>@rjkt/cya-react-webpack-template</code>：基于 webpack + js 的 React 项目</li><li><code>@rjkt/cya-react-cra-ts-h5-template</code>：基于 create-react-app + craco + typescript + h5 的项目</li><li><code>@rjkt/cya-react-vite-h5-template</code>：基于 vite + typescript 的 H5 项目</li><li><code>@rjkt/cya-react-vite-admin-template</code>：基于 vite + typescript 的管理后台项目</li><li><code>@rjkt/cya-lib-template</code>：基于 rollup + typescript 的库模板</li><li><code>@rjkt/cya-lib-monorepo-template</code>：基于 pnpm + typescript 的 monorepo 库模板</li></ul><h3 id="自定义模板" tabindex="-1">自定义模板 <a class="header-anchor" href="#自定义模板" aria-label="Permalink to &quot;自定义模板&quot;">​</a></h3><p>你可以使用 <code>transform</code> 命令创建自己的模板：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> transform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">源项目路</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">径</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">目标模板路</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">径</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-custom-template</span></span></code></pre></div><p>然后使用自定义模板创建项目：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">目标模板路</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">径</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="组件模板" tabindex="-1">组件模板 <a class="header-anchor" href="#组件模板" aria-label="Permalink to &quot;组件模板&quot;">​</a></h2><h3 id="内置组件模板" tabindex="-1">内置组件模板 <a class="header-anchor" href="#内置组件模板" aria-label="Permalink to &quot;内置组件模板&quot;">​</a></h3><ul><li><code>react</code>：React 函数组件</li><li><code>ts-react</code>：TypeScript React 函数组件</li></ul><h3 id="自定义组件模板" tabindex="-1">自定义组件模板 <a class="header-anchor" href="#自定义组件模板" aria-label="Permalink to &quot;自定义组件模板&quot;">​</a></h3><p>你可以在项目中创建自定义组件模板，放在项目根目录的 <code>component</code> 目录下，然后使用 <code>-t</code> 选项指定：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> component</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyComponent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./my-custom-template</span></span></code></pre></div><p>组件模板中可以使用 <code>component-name</code> 作为占位符，创建时会被替换为实际的组件名。</p>',38),d=[h];function p(l,n,o,r,c,k){return s(),a("div",null,d)}const b=t(e,[["render",p]]);export{y as __pageData,b as default};
