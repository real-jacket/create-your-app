import{_ as a,c as s,o as i,aj as e}from"./chunks/framework.CM7BdzdB.js";const g=JSON.parse('{"title":"配置选项","description":"","frontmatter":{},"headers":[],"relativePath":"api/options.md","filePath":"api/options.md"}'),t={name:"api/options.md"},h=e(`<h1 id="配置选项" tabindex="-1">配置选项 <a class="header-anchor" href="#配置选项" aria-label="Permalink to &quot;配置选项&quot;">​</a></h1><h2 id="项目创建选项" tabindex="-1">项目创建选项 <a class="header-anchor" href="#项目创建选项" aria-label="Permalink to &quot;项目创建选项&quot;">​</a></h2><p>使用 <code>cya create</code> 命令创建项目时，可以通过交互式命令行配置以下选项：</p><h3 id="项目名称" tabindex="-1">项目名称 <a class="header-anchor" href="#项目名称" aria-label="Permalink to &quot;项目名称&quot;">​</a></h3><p>项目的名称，会用于创建项目目录和设置 package.json 中的 name 字段。</p><h3 id="模板选择" tabindex="-1">模板选择 <a class="header-anchor" href="#模板选择" aria-label="Permalink to &quot;模板选择&quot;">​</a></h3><p>可以选择以下内置模板：</p><ul><li><code>@rjkt/cya-react-webpack-template</code>：基于 webpack + js 的 React 项目</li><li><code>@rjkt/cya-react-cra-ts-h5-template</code>：基于 create-react-app + craco + typescript + h5 的项目</li><li><code>@rjkt/cya-react-vite-h5-template</code>：基于 vite + typescript 的 H5 项目</li><li><code>@rjkt/cya-react-vite-admin-template</code>：基于 vite + typescript 的管理后台项目</li><li><code>@rjkt/cya-lib-template</code>：基于 rollup + typescript 的库模板</li><li><code>@rjkt/cya-lib-monorepo-template</code>：基于 pnpm + typescript 的 monorepo 库模板</li></ul><p>也可以通过 <code>-t</code> 选项直接指定模板：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @rjkt/cya-react-cra-ts-h5-template</span></span></code></pre></div><h3 id="覆盖已存在目录" tabindex="-1">覆盖已存在目录 <a class="header-anchor" href="#覆盖已存在目录" aria-label="Permalink to &quot;覆盖已存在目录&quot;">​</a></h3><p>如果目标目录已存在，可以通过 <code>-f</code> 选项强制覆盖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span></span></code></pre></div><h2 id="组件创建选项" tabindex="-1">组件创建选项 <a class="header-anchor" href="#组件创建选项" aria-label="Permalink to &quot;组件创建选项&quot;">​</a></h2><p>使用 <code>cya component</code> 命令创建组件时，可以配置以下选项：</p><h3 id="组件名称" tabindex="-1">组件名称 <a class="header-anchor" href="#组件名称" aria-label="Permalink to &quot;组件名称&quot;">​</a></h3><p>组件的名称，会用于创建组件文件和设置组件内容。如果不在命令行中提供，会通过交互式命令行询问。</p><h3 id="组件类型" tabindex="-1">组件类型 <a class="header-anchor" href="#组件类型" aria-label="Permalink to &quot;组件类型&quot;">​</a></h3><p>可以通过 <code>-t</code> 选项指定组件类型：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建React组件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> component</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyComponent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建TypeScript React组件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> component</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyComponent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-react</span></span></code></pre></div><h3 id="组件目录" tabindex="-1">组件目录 <a class="header-anchor" href="#组件目录" aria-label="Permalink to &quot;组件目录&quot;">​</a></h3><p>可以通过 <code>-d</code> 选项指定组件创建的目录：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> component</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyComponent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/components</span></span></code></pre></div><h2 id="包创建选项" tabindex="-1">包创建选项 <a class="header-anchor" href="#包创建选项" aria-label="Permalink to &quot;包创建选项&quot;">​</a></h2><p>使用 <code>cya package</code> 命令创建子包时，可以配置以下选项：</p><h3 id="包名称" tabindex="-1">包名称 <a class="header-anchor" href="#包名称" aria-label="Permalink to &quot;包名称&quot;">​</a></h3><p>包的名称，会用于创建包目录和设置 package.json 中的 name 字段。</p><h3 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h3><p>可以通过 <code>-s</code> 选项指定包的作用域：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-package</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @custom</span></span></code></pre></div><p>默认作用域为 <code>@rjkt</code>。</p><h3 id="目标目录" tabindex="-1">目标目录 <a class="header-anchor" href="#目标目录" aria-label="Permalink to &quot;目标目录&quot;">​</a></h3><p>可以通过 <code>-d</code> 选项指定创建包的目录：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-package</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libs</span></span></code></pre></div><p>默认目录为 <code>packages</code>。</p><h3 id="模板目录" tabindex="-1">模板目录 <a class="header-anchor" href="#模板目录" aria-label="Permalink to &quot;模板目录&quot;">​</a></h3><p>可以通过 <code>-t</code> 选项指定模板目录：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-package</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/custom-template</span></span></code></pre></div><p>默认模板目录为 <code>packages/template</code>。</p><h3 id="覆盖已存在目录-1" tabindex="-1">覆盖已存在目录 <a class="header-anchor" href="#覆盖已存在目录-1" aria-label="Permalink to &quot;覆盖已存在目录&quot;">​</a></h3><p>如果目标目录已存在，可以通过 <code>-f</code> 选项强制覆盖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-package</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span></span></code></pre></div><h2 id="模板转换选项" tabindex="-1">模板转换选项 <a class="header-anchor" href="#模板转换选项" aria-label="Permalink to &quot;模板转换选项&quot;">​</a></h2><p>使用 <code>cya transform</code> 命令转换模板时，可以配置以下选项：</p><h3 id="源项目路径" tabindex="-1">源项目路径 <a class="header-anchor" href="#源项目路径" aria-label="Permalink to &quot;源项目路径&quot;">​</a></h3><p>源项目的路径，必填。</p><h3 id="目标模板路径" tabindex="-1">目标模板路径 <a class="header-anchor" href="#目标模板路径" aria-label="Permalink to &quot;目标模板路径&quot;">​</a></h3><p>目标模板的路径，必填。</p><h3 id="模板包名" tabindex="-1">模板包名 <a class="header-anchor" href="#模板包名" aria-label="Permalink to &quot;模板包名&quot;">​</a></h3><p>可以通过 <code>-n</code> 选项指定模板包名：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cya</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> transform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./my-project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./templates/my-template</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-custom-template</span></span></code></pre></div><p>如果不指定，会使用源目录名作为模板包名。</p>`,52),p=[h];function l(n,c,o,d,r,k){return i(),s("div",null,p)}const y=a(t,[["render",l]]);export{g as __pageData,y as default};
